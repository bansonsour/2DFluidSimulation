#version 430
layout(local_size_x = 32, local_size_y = 32) in;

uniform ivec2 texSize;
uniform float dt;

layout(rgba32f, binding = 0) uniform image2D field_WRITE;
layout(rgba32f, binding = 1) uniform sampler2D field_READ;
layout(rgba32f, binding = 2) uniform sampler2D velocities_READ;

//https://community.khronos.org/t/manual-bilinear-filter/58504/7
vec4 texture2D_bilinear(in sampler2D t, in vec2 uv)
{
  vec2 textureSize = vec2(texSize);
  vec2 texelSize = 1 / textureSize;

  vec2 f = fract( uv * textureSize );
  uv += ( .5 - f ) * texelSize;    // move uv to texel centre
  vec4 tl = texture2D(t, uv);
  vec4 tr = texture2D(t, uv + vec2(texelSize.x, 0.0));
  vec4 bl = texture2D(t, uv + vec2(0.0, texelSize.y));
  vec4 br = texture2D(t, uv + vec2(texelSize.x, texelSize.y));
  vec4 tA = mix( tl, tr, f.x );
  vec4 tB = mix( bl, br, f.x );
  return mix( tA, tB, f.y );
}

void main()
{
  ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
  vec2 texCoords = pixelCoords / vec2(texSize);

  vec2 vel = texture2D(velocities_READ, texCoords).xy;
  vec2 pos = vec2(pixelCoords) - dt * vel;

  imageStore(field_WRITE, pixelCoords, texture2D_bilinear(field_READ, pos / vec2(texSize)));
}
