#version 430
layout(local_size_x = 32, local_size_y = 32) in;

uniform ivec2 texSize;
uniform float dt;

layout(rgba32f, binding = 0) uniform image2D velocities_READ_WRITE;
layout(rgba32f, binding = 1) uniform sampler2D vorticity;

void main()
{
  ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
  const ivec2 dx = ivec2(1, 0); 
  const ivec2 dy = ivec2(0, 1);

  float vL = texelFetchOffset(vorticity, pixelCoords, 0, - dx).x;
  float vR = texelFetchOffset(vorticity, pixelCoords, 0,   dx).x;
  float vB = texelFetchOffset(vorticity, pixelCoords, 0, - dy).x;
  float vT = texelFetchOffset(vorticity, pixelCoords, 0,   dy).x;

  float vC = texelFetch(vorticity, pixelCoords, 0).x;
  if(pixelCoords.x == 0) vL = vC;
  if(pixelCoords.y == 0) vB = vC;
  if(pixelCoords.x >= texSize.x - 1) vR = vC;
  if(pixelCoords.y >= texSize.y - 1) vT = vC;

  vec2 force = 0.5f * vec2(abs(vT) - abs(vB), abs(vR) - abs(vL));

  force /= 1e-10 + length(force);

  force *= 4.0f * vC * vec2(1.0f, -1.0f);

  imageStore(velocities_READ_WRITE, pixelCoords, imageLoad(velocities_READ_WRITE, pixelCoords) + dt * vec4(force, 0.0f, 0.0f));
}
