#version 450

#include "includes.comp"
#include "layout_size.comp"

uniform float dt;

layout(rgba32f, binding = 0) uniform image2D field_WRITE;
layout(binding = 1) uniform sampler2D field_n_READ;
layout(binding = 2) uniform sampler2D field_n_hat_READ;
layout(binding = 3) uniform sampler2D field_n_1_hat_READ;
layout(binding = 4) uniform sampler2D velocities_READ;

void main()
{
  vec2 tSize = TEXTURE_SIZE(field_n_READ);
  ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
  vec2 texCoords = pixelCoords / tSize;

  vec2 vel = texelFetch(velocities_READ, pixelCoords, 0).xy;
  vec2 pos = vec2(pixelCoords) - dt * vel;

  vec2 npos = floor(pos + vec2(0.5f, 0.5f));
  npos = npos / tSize;

  vec2 ht = vec2(0.5f / tSize.x, 0.5f / tSize.y);

  vec4 nodeValues[4];
  nodeValues[0] = texture2D_bilinear(field_n_READ, npos + vec2(- ht.x, - ht.y));
  nodeValues[1] = texture2D_bilinear(field_n_READ, npos + vec2(  ht.x, - ht.y));
  nodeValues[2] = texture2D_bilinear(field_n_READ, npos + vec2(- ht.x,   ht.y));
  nodeValues[3] = texture2D_bilinear(field_n_READ, npos + vec2(  ht.x,   ht.y));

  vec4 phiMin = min(min(min(nodeValues[0], nodeValues[1]), nodeValues[2]), nodeValues[3]);
  vec4 phiMax = max(max(max(nodeValues[0], nodeValues[1]), nodeValues[2]), nodeValues[3]);

  vec4 r = texture2D_bilinear(field_n_1_hat_READ, pos / tSize) 
    + 0.5f * (texelFetch(field_n_READ, pixelCoords, 0) - texelFetch(field_n_hat_READ, pixelCoords, 0));

  r = max(min(r, phiMax), phiMin);

  imageStore(field_WRITE, pixelCoords, 0.99f * r);
}
